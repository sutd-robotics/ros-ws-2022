#!/usr/bin/env python3
'''
Shebang: execute as python script
'''

import rospy
from custom_messages.msg import My_msg
'''
rospy:             API to interface with ROS Topics, Services, Parameters
custom_messages:   custom messages package just created
'''

def talker():
    pub = rospy.Publisher('chatter', My_msg, queue_size = 10)
    '''
    rospy.init_node([name: str], [anonymous: bool])
        Defines name of node to communicate to ROS Master
        Anonymous lets ROS to generate unique names when we create multiple instances 
            of the node
    '''
    
    rospy.init_node('talker', anonymous = True)
    '''
    rospy.Publisher([name: str], [type: msg def], [queue_size: int]) 
        Create a publisher object
        Publish string messages to topic '/chatter' with max queue of 10
    '''
    
    rate = rospy.Rate(10) # 10hz
    '''
    rospy.Rate([freq: int])
        Rate object to help loop at fixed frequency with .sleep method
        Works as long as execution < 1/f
    '''
    
    # Create message object
    my_msg = My_msg()
    
    while not rospy.is_shutdown():
        
        # Attach data to message field
        my_msg.name = rospy.get_param('/basic_pub_sub/name')
        my_msg.fav_num = int(rospy.get_param('/basic_pub_sub/fav_num'))

        rospy.loginfo('My name %s, I like %s', my_msg.name, my_msg.fav_num)
        
        # Publish
        pub.publish(my_msg)
        rate.sleep()
    '''
    rospy.is_shutdown()
        check ROS internals to see if program should exit
    
    rospy.loginfo([log: String])
        Write logs to screen, logfile and rosout

    [rospy.Publisher].publish([message: msg])
        Publish message to defined topic
    
    [rospy.Rate].sleep()
        Pause execution just enough to maintain frequency
    '''

if __name__ == '__main__':
    rospy.set_param('/basic_pub_sub/name', 'Jack Goff')
    rospy.set_param('/basic_pub_sub/fav_num', 69)
    try:
        talker()
    except rospy.ROSInterruptException:
        pass    
    '''
    rospy.ROSInterruptException
        Capture interruptions to program to terminate gracefully
        e.g. SIGINT (ctrl-C), shutdown
    '''
